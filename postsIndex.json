[
  {
    "slug": "2024-12-15-test-automatic-loading",
    "title": "Automatic Code Quality checks according to SEP guidelines",
    "date": "2024-12-15",
    "tags": [
      "university",
      "github",
      "CI"
    ],
    "excerpt": "The set of steps needed to utilize Understand from Scitools and Simian checks within Github Actions.",
    "content": "In order to avoid either manual checks requiring each student to run the tools on their machines continuously throughout the project, or refactoring to adhere to the standards before submission, following this tutorial this process can be automated to have the checks continuously run on each pull request.\n\nAn example:\n![img.png](img.png)\n\nIn this tutorial, I will guide through the steps needed to set up automatic code quality checks, on the example of our setup for frontend, but I specify each place where this template can be adjusted to your project.\n\n# Prerequisites\n\n- A GitHub repository for your project. \n(In case you chose to use GitLab or Bitbucket, the steps will be similar, but the tutorial is tailored to GH.)\n- Understand from Scitools license\n  (Single student rather than entire developing team needs to acquire it, it's reused on every run)\n\n# Steps\nTo quickly summarize the steps needed to set up the checks:\n1. Acquire a license for Understand from Scitools.\n2. Add the license to your repository secrets.\n3. Specify commands, paths, and languages to run Understand and Simian checks.\n4. Create a GitHub Actions workflow file.\n5. Few repo tweaks.\n\n## Step 1 - Acquire a license for Understand from Scitools\n\nYou can acquire a free license for Understand from Scitools as a student. Follow the instructions on their website: https://scitools.com/student\n\n## Step 2 - Add the license to your repository secrets\n\nOnce you have the license string, navigate to your GitHub repository, go to \"Settings\" > \"Secrets and variables\" > \"Actions\", and under \"Repository secrets\" add a new secret named `UNDERSTAND_LICENSE` with the license string as its value.\n\n## Step 3 - Add python script, specify commands, paths, and languages to run Understand and Simian checks\n\nBefore creating the workflow file, we need to prepare a few things in the repository.\n\n1. Create a folder `.github/quality_tools/` in your repository to store the necessary files.\n2. Add to that folder a Python script `parse_metrics.py` to parse the metrics CSV file generated by Understand into a markdown format suitable for GitHub comments. You can download the ready-made script here: [Download parse_metrics.py](downloads/parse_metrics.py).\n\n> Place it in `.github/quality_tools/parse_metrics.py` in your repository.\n\nNext, we have to specify the commands for Understand to run the analysis. We create a template file named `frontend_commands.txt` in the same `.github/quality_tools/` folder.\n\n```aiignore\ncreate -languages Web frontend_metrics.und #TODO: Adjust the name and language\n-db frontend_metrics.und #TODO: Adjust the name if you have changed it above\nadd frontend/src\nsettings -MetricShowAggregatedFileMetrics on\nsettings -MetricShowAggregatedClassMetrics on\nsettings -MetricShowCouplingAndCohesionMetrics on\nsettings -MetricShowInheritanceMetrics on\nsettings -MetricShowStatementCountMetrics on\nsettings -MetricCyclomatic all\nsettings -MetricShowDefaultSummaryMetrics on\nanalyze\nmetrics\nreport\n```\nHere to adjust to your project, you might want to change:\n1. Language (e.g. `-languages C++` for C++ projects), we use 'Web' for our frontend project. List of supported languages can be found [here](https://scitools.com/support/languages/)\n2. Not needed but you can also adjust the name of the database, but it should match in both places, and will have to be adjusted in templats later.\n\n## Step 4 - Create a GitHub Actions workflow file\n\nEither manually in a folder `.github/workflows/` or using the GitHub interface, create a new workflow file named `code_quality.yml`.\nThis will serve as the configuration for the CI pipeline, which we use to run checks but can be extended to do more in the future, this tutorial serves as a basis for creation just for code quality checks.\n\n\nHere I provide a sample workflow file for our frontend that you can use as a starting point. You can customize it according to your project's needs.\nLook at the comments (specifically those starting with `TODO`) for places where you might want to/should adjust the configuration.\n```yaml\nname: Code Quality Checks\non:\n  workflow_dispatch: # Allows manual triggering of the workflow in GitHub UI\n  push: # Triggers on push to main branch \n    branches: [main]\n    paths:\n      - 'frontend/**' # TODO Specify the path where changes will trigger the workflow\n  pull_request: # (pull requests too) - adjust if needed\n    branches: [main]\n    paths:\n      - 'frontend/**'\njobs:\n  understand_analysis:\n    runs-on: ubuntu-latest\n    container:\n      image: ghcr.io/maksderylo/understand-cli:latest # Premade image with the tools installed\n    steps:\n      - name: Checkout source code\n        uses: actions/checkout@v4\n\n      - name: Set UTF-8 locale\n        run: |\n          export LC_ALL=C.UTF-8\n          export LANG=C.UTF-8\n\n      - name: Check if license variable is set\n        run: |\n          if [ -z \"$UNDERSTAND_LICENSE\" ]; then\n            echo \"Understand license variable is not set!\"\n            exit 1\n          else\n            echo \"Understand license variable is set.\"\n          fi\n        env:\n          UNDERSTAND_LICENSE: ${{ secrets.UNDERSTAND_LICENSE }}\n\n      - name: Register Understand license\n        run: |\n          export LC_ALL=C.UTF-8\n          export LANG=C.UTF-8\n          und -setlicensecode \"$UNDERSTAND_LICENSE\"\n        env:\n          UNDERSTAND_LICENSE: ${{ secrets.UNDERSTAND_LICENSE }}\n\n      - name: Run Understand analysis\n        run: |\n          export LC_ALL=C.UTF-8\n          export LANG=C.UTF-8\n          und process .github/quality_tools/frontend_commands.txt # TODO Adjust the path to your commands file if needed\n\n      - name: Install Python for metrics parsing\n        run: |\n          apt-get update\n          apt-get install -y python3\n\n      - name: Parse metrics CSV to markdown\n        id: parse-metrics\n        run: | #TODO Adjust the python file path below if needed, and the input CSV file name if you have changed db name in commands file\n          python3 .github/quality_tools/parse_metrics.py --input frontend_metrics.csv --markdown > metrics_report.txt \n          # Set multi-line output\n          {\n            echo 'report<<EOF'\n            cat metrics_report.txt\n            echo EOF\n          } >> \"$GITHUB_OUTPUT\"\n\n      - name: Post metrics report comment on PR\n        if: github.event_name == 'pull_request'\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const body = process.env.REPORT;\n            await github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body\n            });\n        env:\n          REPORT: ${{ steps.parse-metrics.outputs.report }}\n\n      - name: Deregister Understand license\n        run: |\n          export LC_ALL=C.UTF-8\n          export LANG=C.UTF-8\n          OUTPUT=$(und -deregisterlicensecode || true)\n          echo \"$OUTPUT\"\n          echo \"$OUTPUT\" | grep -q \"Successful\"\n        if: always()\n\n      - name: Upload metrics report artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: understand-metrics\n          path: |\n            frontend_metrics_html\n```"
  }
]