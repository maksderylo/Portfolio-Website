name: Code Quality Checks
on:
  workflow_dispatch: # Allows manual triggering of the workflow in GitHub UI
  push: # Triggers on push to main branch
    branches: [main]
    paths:
      - 'frontend/**' # TODO Specify the path where changes will trigger the workflow
  pull_request: # (pull requests too) - adjust if needed
    branches: [main]
    paths:
      - 'frontend/**'
jobs:
  understand_analysis:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/maksderylo/understand-cli:latest # Premade image with the tools installed
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set UTF-8 locale
        run: |
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8

      - name: Check if license variable is set
        run: |
          if [ -z "$UNDERSTAND_LICENSE" ]; then
            echo "Understand license variable is not set!"
            exit 1
          else
            echo "Understand license variable is set."
          fi
        env:
          UNDERSTAND_LICENSE: ${{ secrets.UNDERSTAND_LICENSE }}

      - name: Register Understand license
        run: |
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8
          und -setlicensecode "$UNDERSTAND_LICENSE"
        env:
          UNDERSTAND_LICENSE: ${{ secrets.UNDERSTAND_LICENSE }}

      - name: Run Understand analysis
        run: |
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8
          und process .github/quality_tools/frontend_commands.txt # TODO Adjust the path to your commands file if needed

      - name: Install Python for metrics parsing
        run: |
          apt-get update
          apt-get install -y python3

      - name: Parse metrics CSV to markdown
        id: parse-metrics
        run: | #TODO Adjust the python file path below if needed, and the input CSV file name if you have changed db name in commands file
          python3 .github/quality_tools/parse_metrics.py --input frontend_metrics.csv --markdown > metrics_report.txt 
          # Set multi-line output
          {
            echo 'report<<EOF'
            cat metrics_report.txt
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Post metrics report comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const body = process.env.REPORT;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
        env:
          REPORT: ${{ steps.parse-metrics.outputs.report }}

      - name: Deregister Understand license
        run: |
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8
          OUTPUT=$(und -deregisterlicensecode || true)
          echo "$OUTPUT"
          echo "$OUTPUT" | grep -q "Successful"
        if: always()

      - name: Upload metrics report artifact
        uses: actions/upload-artifact@v4
        with:
          name: understand-metrics
          path: |
            frontend_metrics_html